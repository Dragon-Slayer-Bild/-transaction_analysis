import pandas as pd
import pytest

from src.reports import report_decorator, spending_by_category


@pytest.fixture
def transactions_list_test():
    transactions = [
        {
            "Дата операции": "31.01.2023 15:00:41",
            "Статус": "OK",
            "Категория": "Каршеринг",
            "Номер карты": "*7199",
            "Сумма операции": 1025.0,
            "Сумма платежа": 1025.0,
            "Валюта платежа": "RUB",
            "Описание": "Оплата денег",
            "Кэшбэк": "nan",
            "Бонусы (включая кэшбэк)": 20,
        },
        {
            "Дата операции": "04.01.2018 15:00:41",
            "Статус": "OK",
            "Категория": "Каршеринг",
            "Номер карты": "*7199",
            "Сумма операции": -25.0,
            "Сумма платежа": -25.0,
            "Валюта платежа": "RUB",
            "Кэшбэк": "nan",
            "Бонусы (включая кэшбэк)": 20,
        },
        {
            "Дата операции": "04.01.2018 14:05:08",
            "Статус": "OK",
            "Категория": "Каршеринг",
            "Номер карты": "*7197",
            "Сумма операции": -1065.9,
            "Сумма платежа": -1065.9,
            "Валюта платежа": "RUB",
            "Кэшбэк": "nan",
            "Бонусы (включая кэшбэк)": 21,
        },
        {
            "Дата операции": "03.01.2018 15:03:35",
            "Статус": "OK",
            "Категория": "Каршеринг",
            "Номер карты": "*7197",
            "Сумма операции": -73.06,
            "Сумма платежа": -73.06,
            "Валюта платежа": "USD",
            "Описание": "Перевод денег",
            "Кэшбэк": "nan",
            "Бонусы (включая кэшбэк)": 1,
        },
        {
            "Дата операции": "31.01.2023 14:55:21",
            "Статус": "OK",
            "Категория": "Каршеринг",
            "Номер карты": "*7197",
            "Сумма операции": -21.0,
            "Сумма платежа": -21.0,
            "Валюта платежа": "USD",
            "Описание": "Оплата за товар",
            "Кэшбэк": "nan",
            "Бонусы (включая кэшбэк)": 0,
        },
        {
            "Дата операции": "31.01.2023 20:27:51",
            "Статус": "OK",
            "Категория": "Каршеринг",
            "Номер карты": "*7197",
            "Сумма операции": -316.0,
            "Сумма платежа": -316.0,
            "Описание": "Перевод денег",
            "Кэшбэк": "nan",
            "Валюта платежа": "RUB",
            "Бонусы (включая кэшбэк)": 6,
        },
        {
            "Дата операции": "31.01.2023 12:49:53",
            "Статус": "Failed",
            "Категория": "Каршеринг",
            "Номер карты": "nan",
            "Сумма операции": -3000.0,
            "Сумма платежа": -3000.0,
            "Описание": "Перевод денег",
            "Кэшбэк": "nan",
            "Валюта платежа": "RUB",
            "Бонусы (включая кэшбэк)": 0,
        },
    ]
    return transactions


def test_spending_by_category_success(transactions_list_test):
    '''Успеный тест создания отчета по категории'''
    df = pd.DataFrame(transactions_list_test)
    result = spending_by_category(df, "Каршеринг", "2018-01-04")
    result_json = result.to_json(orient="records", force_ascii=False)
    expected = '[{"Категория":"Каршеринг","Сумма операции":-1163.96}]'
    assert result_json == expected


def test_report_decorator_success(transactions_list_test):
    '''Успеный тест записи отчета в файл'''
    df = pd.DataFrame(transactions_list_test)

    @report_decorator("ФАЙЛ")
    def decorated_spending_by_category(df, category, date):
        return spending_by_category(df, category, date)

    decorated_spending_by_category(df, "Каршеринг", "2018-01-04")

    with open("data/ФАЙЛ.json", "r", encoding="utf-8") as file:
        result = file.read()

    expected = '[{"Категория":"Каршеринг","Сумма операции":-1163.96}]'
    assert result == expected
